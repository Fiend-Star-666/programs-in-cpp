#include <bits/stdc++.h>
#define ll long long
using namespace std;
//buid tree
void buildTree(int *arr,int *tree,int s,int end,int treeindex){
    int mid=(s+end)/2;
    if (s==end){
        tree[treeindex]=arr[s];
        return;
    }
    buildTree(arr,tree,s,mid,2*treeindex);
    buildTree(arr,tree,mid+1,end,2*treeindex+1);
    tree [treeindex]=tree[2*treeindex]+tree[2*treeindex+1];
    
}
//update tree
void updateTree (int *arr,int *tree,int s, int end,int treeindex,int key,int keyvalue){
    int mid = (s+end)/2;
    if (s==end){
        arr[key]=keyvalue;
        tree[treeindex]=keyvalue;
        return; 
        
    }
    if (key<mid){
        updateTree (arr,tree,s,mid,2*treeindex,key,keyvalue);
    }
    else{
        updateTree (arr,tree,mid+1,end,2*treeindex+1,key,keyvalue);
    }
    tree [treeindex]=tree[2*treeindex]+tree[2*treeindex+1];
}
// query find sum from given indices(si to ei)
int query (int *arr,int *tree,int s, int end,int treeindex,int si,int ei){
   /* int mid=(s+end)/2;
    if (si<mid&&ei<=mid){
        func(arr,tree,s,mid,treeindex,si,ei);
    }
    else if (si>mid&&ei<end){
        func(arr,tree,mid+1,end,treeindex,si,ei);
    }
    else (si<mid&&ei>mid)*/
    // completely outside
    if (s>ei||end<si)return 0;
    // completely inside
    if (s>=si&&end<=ei)
    return tree[treeindex];
    // partially inside and partially outside
    int mid = (s+end)/2;
    int ans1 = query(arr,tree,s,mid,2*treeindex,si,ei);
    int ans2 = query(arr,tree,mid+1,end,2*treeindex+1,si,ei);
    return ans1 + ans2;
}

int main() {
    int n;cin>>n;
	int arr[n];
	for (int i=0;i<n;i++)cin>>arr[i];
	// size of the tree 2^(logn+1) approximately 4n  
	int  *tree= new int[4*n];

	
	buildTree(arr,tree,0,4,1);
	updateTree(arr,tree,0,4,1,4,10);
	
	for (int i=1;i<10;i++)
	cout<<tree[i]<<endl;
	cout<<query(arr,tree,0,4,1,2,4);
	return 0;
}
